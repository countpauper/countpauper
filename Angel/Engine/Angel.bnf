<knowledge> ::= <axiom> <space> <axioms>
<knowledge> ::= ""
<query>::=<expression> <space> "?"
# TODO <namsepace>  
<axioms> ::= "," <space> <axiom> <axioms> | ε-axioms
<axiom> ::= <predicate> <space> <terms> 
<terms> ::= ":" <space> <expression> | ε-terms
<predicate> ::= <id> <space> <arguments>
<arguments> ::= "(" <space> <sequence> <space> ")" ε-predicate | ε-predicate
<sequence> ::= <expression> <space> <sequence-next> | ε-sequence
<sequence-next> ::= "," <space> <expression> <sequence-next> | ε-sequence
<expression> ::= <value> <operand>
<operand> ::= <space> <binary-operator> <space> <value> <operand> | ε-expression
<numerical-unary-operator> ::= '[+-]'
<star-operator> ::= "*"
<numerical-binary-operator> ::= '[\/^]' | <numerical-unary-operator> | <star-operator>
<logical-unary-operator> ::= '[~¬]'
<logical-binary-operator> ::= '[&\|]'
<comparator> ::= '(!=|>=|<=|[<>=≠≥≤])'
<set-either-operator> ::= "@"
<set-unary-operator> ::= '[∃∀]' | <set-either-operator> | <star-operator>
<set-binary-operator> ::= '[.∈]' | <unary-either-operator>
<binary-operator> ::= <numerical-binary-operator> | <logical-binary-operator> | <comparator> | <set-binary-operator> 
<unary-operator> ::= <numerical-unary-operator> | <logical-unary-operator> | <set-unary-operator>
<value> ::= <unary-operator> <value> | <object> | "(" <space> <expression> <space> ")" 
# TODO indexation [ ], lists, sets and ranges value:value 
<object> ::= <positive-integer>
<object> ::= <predicate>  # NB: true and false are predefined ids with a value 
<object> ::= <positive-float>
<object> ::= <set> 
<object> ::= <string> 
<object> ::= <variable> 
<positive-integer> ::= '[0-9]+' 
<positive-float> ::= '(([0-9]*\.[0-9]+([eE][-+]?[0-9]+)?)|(inf)|(nan))'
<id> ::= '([^\x00-\x7F]|[A-Za-z_])([^\x00-\x7F]|\w|\_)*'
<variable> ::= "$" <id> | <star-operator> <id> 
<space> ::= <req-space> | "" 
<req-space> ::= '\s+'