<knowledge> ::= <axiom> <space> <axioms>
<knowledge> ::= ""
<query>::=<expression> <space> "?"
# TODO <namsepace>  
<axioms> ::= <axiom> <space> <axioms> | ε-axioms

<axiom> ::= <predicate> <space> <terms>  
<terms> ::= <implication> <space> <expression> <space> | ε-terms
<predicate> ::= <id> <space> <arguments>
<arguments> ::= <namspace> 
<namespace> ::= "{" <space> <axioms> "}"
<arguments> ::= "(" <space> <sequence> <space> ")" ε-predicate | ε-predicate
<sequence> ::= <expression> <space> <sequence-next> | ε-sequence
<sequence-next> ::= "," <space> <expression> <sequence-next> | ε-sequence
<expression> ::= <value> <space> <operand>
<operand> ::= <binary-operator> <space> <value> <space> <operand> | ε-expression
<numerical-prefix-operator> ::= '[+-]' | <comparator>
<star-operator> ::= "*"
<numerical-binary-operator> ::= '[\/\^⋅÷]' | <numerical-prefix-operator> | <star-operator>
<logical-prefix-operator> ::= '[~¬]'
<logical-binary-operator> ::= '[&\|]'
<comparator> ::= '(!=|>=|<=|[<>=≠≥≤])'
<set-either-operator> ::= "@"
<implication> ::= ':|←'
<value-prefix-operator> ::= '[∃∀\$]' | <set-either-operator> | <star-operator>
<set-binary-operator> ::= '\.{1,2}|∈' | <set-either-operator> | <implication>
<binary-operator> ::= <numerical-binary-operator> | <logical-binary-operator> | <comparator> | <set-binary-operator> 
<prefix-operator> ::= <numerical-prefix-operator> | <logical-prefix-operator> | <value-prefix-operator>
<value> ::= <prefix-operator> <value> | <object> | "(" <space> <expression> <space> ")" 
# TODO indexation [ ], lists, sets and ranges value:value 
<object> ::= <positive-integer>
<object> ::= <predicate>  # NB: true and false are predefined ids with a value 
<object> ::= <positive-float>
<object> ::= <set> 
<object> ::= <string> 
<object> ::= <variable> 
<object> ::= <container>
<positive-integer> ::= '[0-9]+' 
<positive-float> ::= '(([0-9]*\.[0-9]+([eE][-+]?[0-9]+)?)|(inf)|(nan))'
<string> ::= '\"([^"\\]|\\\"|\\\\)*\"'
<id> ::= '([^\x00-\xBF÷∀-⋿←-↕]|[A-Za-z_])([^\x00-\xBF÷∀-⋿←-↕]|\w|\_)*'
<variable_id> ::= <id> | <variable> | εanonymous
<variable> ::= <value-prefix-operator> <variable_id>
<container> ::= <list> | <set> 
<list> ::= "[" <space> <sequence> "]"
<set> ::= "{" <space> <sequence> "}"
<space> ::= <req-space> | "" 
<req-space> ::= <linear-space> | <endl>
<linear-space> ::= '[ \t\r]+'
<endl> ::= '(\s*\n)+'