@startuml

class Element <<variant, concept>> {

}

Boolean --|> Element
Integer --|> Element 
Float --|> Element
Imaginary --|> Element
Identifier --|> Element
String --|> Element
Variable --|> Element 

class Expression <<variant, concept>> {
    Infer(Knowledge) : Expression
    Matches(Expression, Variables): Match
    
}

Element --|> Expression
Predicate --|> Expression 
Container  --|> Expression 
Operation --|> Expression 

class Container {
    size
    Get(Expression): Expression
}

Pair --|> Container
Tuple --|> Container 

class List {
    <<ordered>>
    <<non-unique>
}
class Bag {
    <<unordered>>
    <<non-unique>>
} 
class Set {
    <<unordered>>
    <<unique>>
}
Set --|> Container
List --|> Sequence
List --|> Tuple
Bag --|> Tuple

Association --|> Pair
Range --|> Pair

Operation --|> Sequence 

Summation --|> Operation 
Division --|> Operation 
Multiplication --|> Operation 
Conjunction --|> Operation 
Disjunection --|> Operation 

Tuple *--> "*" Expresion

Predicate *--> "1 name" Identifier
Predicate *--> "1 arguments" List

Pair *--> "1 left" Expression
Pair *--> "1 right" Expression 


@enduml