* Network namespace
* Load activation function
Factories for layer/connection/function/etc types in NetworkIO
Reduce namespaces in stream
* Move helpers (sigmoid, normal, p) to utils
* operator [] for layers in network
operator [] for activity in state
* operator () for activation function
serial creation of networks 
	? using operators (ie network << input(3) << (undericted() << hidden(3)) << (directed() << output(1)))
	? restores order of layers in stream
	? how to implement recurrent connections then (cyclic network graphs)
*split network in 
	* layer
	* connection
	* network
	* math
	* data (sample, set, batch)
	* Data namespace
* remove precompiled headers
* Make forward declare include with all Net forward declares (and Eigen, std)
* Function in namespace Activation (and Activation, state too)
- Find out which objects can be default copied, which need custom copies (network+references, unique_ptrs?) and which are non-copyable
* Find Getters and see if property can't just be public, rely on const for read only
* move io functions to relevant header files?
* Just make inputs outputs map, store them as such
* Just make activation map. sample becomes input state & output state?
	* Remove Activation::GetLayer()
x Make sample type for belief networks, where input = output except for type 
* rename RBM implementation to binary RBM specialization to make requirement for FreeEnergy and Contrastive Divergence clear
