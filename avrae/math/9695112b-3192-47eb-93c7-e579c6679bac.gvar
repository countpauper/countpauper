try:
    from avrae import * 
    from gvar import * 
    math = import_gvar("math/5f72a0b9-57c3-4223-a7a4-272e57b9bfc3.gvar", "math")
except "FeatureNotAvailable":
    using(math="5f72a0b9-57c3-4223-a7a4-272e57b9bfc3")


### Parse
sub_minus="−" # special unicode hyphen from preparsing with prescan_negative to distinguish from negative numbers
pemdas=[ # list of priorities with dictionaries of separtor:function
    {',':'tuple'},
    {sub_minus:'sub','+':'sum'},
    {'/':'div','*':'prod', '÷':'div','⋅':'mul'},
    {'^':'pow'},
    ]
all_ops = [op for ops in pemdas for op in ops]

# Find matching open close brackets "(substring)remaining 
#    and returns substring, remaining 
#   or (False, input) if the input does not start with a bracket
# nested brackets are skipped and will be part of the substring
def parse_lhs_brackets(input):
    pos=0
    if input[pos]!='(':
        return False, input
    depth = 1
    while depth:
        close=input.find(')',pos+1)
        open=input.find('(',pos+1)
        if close < 0:
            err(f"Unmatched brace in {input}")
        elif open < 0 or open > close:
            depth-=1
            pos = close
        else: # open < close:
            pos = open
            depth+=1
    return input[1:pos],input[pos+1:]

# Find the brackets enclosed arguments of a function eg fn(a)+3
# will return a tuple (fn, a, +3) if the brackets are found
# if no brackets are found it will return input, False, "" 
def parse_rhs_brackets(input):
    open = input.find('(')
    if open < 1:
        return input, False, ""
    else:
        brace_str, remaining=parse_lhs_brackets(input[open:])
        return input[:open], f"({brace_str})", remaining

# the `,` operator creates a tuple function. For the arguments of a function with multiple operands
# this is resolved into a list of arguments with just the operands. 
# eg fn(tuple(1,2,3)) => fn(1,2,3)
# if the expression is already a list of tupple but it only has one argument it is flattened to a single element 
# this makes the final computation result more intuitive for the user
# this supports the , as a full fledged operator 
def simplify(expression):
    if typeof(expression)=='SafeDict':
        if len(expression)==1 and (t := expression.get("tuple")):
            expression = t
    if typeof(expression) == 'SafeList' or typeof(expression) == 'tuple':
        if len(expression)==1:
            return expression[0]
    return expression

def parse_fn(s):
    "Parse fn(params) to a dict(fn=params),remaining or False,remaining"
    fn, params, remaining = parse_rhs_brackets(s)
    if params is not False and fn.isidentifier():
        parsed_params = simplify(parse(params))
        return {fn:parsed_params}, remaining
    else:
        return False, s

# get the operand of an expresison in the form dict(operator=operands)
def expression_operator(expression):
    if typeof(expression) == 'SafeDict':
        return list(expression.keys())[0]
    return None

# get the operands of an expresison in the form dict(operator=operands)
def expression_operands(expression):
    if typeof(expression) == 'SafeDict':
        return list(expression.values())[0]
    else:
        return expression
    
# due to recursive operator parsing, expressions like sum(a,sum(sum(b,c),d)) might be generated
# to simplify them, they are flattend to sum(a,b,c,d)
def flatten_expression(expression):
    if op:=expression_operator(expression):
        combined_operands = []
        for operand in expression_operands(expression):
            if expression_operator(operand)==op:
                combined_operands += expression_operands(operand)
            else:
                combined_operands.append(operand)
        return {op:combined_operands}
    else:
        return expression

# splitting an input string left to right is done in reverse priority order
# so the right most operand of any in the dict of operators is found (eg '*' or '/')
# then the left hand side and right hand side are recursively parsed 
# and the final result is the fn(left, right) where fn is the function for the right most operand 
# so when computing, left and right are computed first, then the lowest priority operand 
def operator_split_left_to_right(input, operators):
    last, idx = None, None
    for op in operators:
        op_idx = input.rfind(op)
        if op_idx>=0 and (not idx or op_idx>idx):
            last, idx = op, op_idx
    if not last: 
        return input
    # if any(not t for t in terms):
    #     err(f"Missing term in {s}")
    left = input[:idx]
    if not left:
        err(f"Missing operand left of {last} in {input}")
    right = input[idx+1:]
    if not right:
        err(f"Missing operand right of {last} in {input}")
    return flatten_expression({operators[last]:[parse(left), parse(right)]})

# Parse a string for operators. This turns a string input like a+b into an  expression sum(a,b)
# which is represented as a dict with one element dict(sum=[a,b])
def parse_op(s):
    for ops in pemdas: 
        # because mul/div and sum/sub have equal priority
        # we split low to high priority: first comma, then sub or sub, then mul or div, then exp left to right  
        if any(op in s for op in ops):
            if split_term := operator_split_left_to_right(s, ops):
                return split_term 
    return False

 
def parse_remaining(c, remaining):
    if not remaining:
        return c
    for ops in pemdas: 
        for op, fn in ops.items():
            if remaining[0]==op:
                return {fn:[c,parse(remaining[1:])]}
    # default to product
    return dict(prod=parse(c))

# reverse the preparaion of prescan_exponents where negative exponents are deonated with an e 
# and positive with an E to avoid confusion with negative values and operators
def parse_preparsed_float(s):
    s = s.replace("e","e-").replace("E","e+")
    return float(s)
    
consts=dict(pi=math.pi,e=math.e,π=math.pi)
def parse_value(s):
    if s in consts:
        return consts[s]
    if s.isdecimal():
        return int(s)
    else:
        return parse_preparsed_float(s)


# To avoid confusion between negating and subtracting, all `-` are replaced with 
# a similar looking unicode negative sign under the right conditions
def prescan_negative(s):
    result=""
    before_neg=",-+/*^("
    negative=True # if true next minus would be a negative
    for c in s:
        if c=="-" and not negative:
            result+= sub_minus
            negative = True
        else:
            negative=c in before_neg
            result += c
    return result

def find_one_of(s, options, pos=0):
    found = [s.find(option, pos) for option in options]
    best = len(s)
    best_idx = None
    for idx, f in enumerate(found):
        if f>0 and f<best:
            best = f
            best_idx = idx
    return best, best_idx
 
# To avoid confusion between floating points with exponents, e.g 1.4e+3 
# and +/- operators, all + or minus signs after an e or E are replaced
# with just the e for e- and E for E+ 
# Right before float conversion they will be converted back 
def prescan_exponents(s):
    result=s
    before_exponent="0123456789."
    pos = 0
    while pos>=0:
        next_pos, option = find_one_of(result, ("e+",'E+', 'e-','E-'), pos)
        if option is None:
            return result
        if result[next_pos-1] in before_exponent:
            replacement = "Ee"[option // 2]
            result = result[:next_pos] + replacement + result[next_pos+2:]
        pos = next_pos+2
    return result

# Parse a user input string to a function expression expressed as a recursive 
# dictionary dict(fn=[argument1, argument2, ...]). Each argument can be another expression
# the resulting function expression can be computed with the compute(...) function below 
def parse(s):
    s=str(s).replace(" ","").replace("\n","").replace("\t","")
    s=prescan_exponents(s)
    s=prescan_negative(s)

    if s[0]=='-':
        return dict(neg=parse(s[1:]))
    braced_str, remaining = parse_lhs_brackets(s)
    if braced_str:
        return parse_remaining(parse(braced_str), remaining)
    fn, remaining = parse_fn(s)
    if fn:
        return parse_remaining(fn, remaining)
    premaining, braced_str, remaining = parse_rhs_brackets(s)
    if braced_str and premaining[-1] in all_ops:
        return parse_remaining(
                parse(premaining[:-1]), 
                premaining[-1]+braced_str+remaining)

    if op := parse_op(s):
        return op
    return parse_value(s)


### Compute
numeric_types = ("int", "float")
ListType = 'SafeList'

def compute_args(arg):
    if typeof(arg) == ListType:
        result = [compute(a) for a in arg]
    else:
        result = compute(arg)
        if typeof(result) != ListType:
            result = [ result ]
    if any(typeof(a) not in numeric_types for a in result):
        err(f"nested tuple in {arg}")
    else:
        return result

def compute_fn(fn, arg):
    cargs = compute_args(arg)
    if fn=='sum':
        return sum(cargs)
    elif fn=='sub':
        return cargs[0] - sum(cargs[1:])
    elif fn=='prod':
        return math.prod(*cargs)
    elif fn=='div':
        return cargs[0]/sum(cargs[1:]) 
    elif fn=='pow':
         return math.pow(*cargs)
    elif fn=='neg':
        return -cargs[0] 
    elif fn=='tuple':
        return cargs
    elif fn=="sqrt":
        return math.squareroot(*cargs)
    elif fn=="log":
        return math.log(*cargs)
    elif fn=='deg':
        return math.degrees(*cargs)
    elif fn=='rad':
        return math.radians(*cargs)
    elif fn=="sin":
        return math.sin(*cargs)
    elif fn=="cos":
        return math.cos(*cargs)
    elif fn=="tan":
        return math.tan(*cargs)
    elif fn=="atan":
        return math.atan(*cargs)
    elif fn=="atan2":
        return math.atan2(*cargs)
    elif fn=='asin':
        return math.asin(cargs[0])
    elif fn=='acos':
        return math.acos(cargs[0])
    elif fn=="factorial":
        return math.factorial(*cargs)
    elif fn=="comb":
        return math.comb(cargs[0], cargs[1])
    elif fn=='perm':
        return math.perm(cargs[0], cargs[1])
    elif fn=='gcd':
        return math.gcd(*cargs)
    elif fn=='lcm':
        return math.lcm(*cargs)
    elif fn=='norm':
        return math.hypot(*cargs)
    else:
        return f"Unknown function {fn}"
        
def compute(c):
    if typeof(c)=='SafeDict':
        result = [compute_fn(fn, a) for fn, a in c.items()]
        return simplify(result)
    else:
        return c

### Present 
reverse_ops = { v:k for ops in pemdas for k,v in ops.items() }

def present_sequence(fn, params):
    operator = reverse_ops[fn]
    return f"({f' {operator} '.join(params)})"
    
def present_fn(fn, arg):
    if typeof(arg) == ListType:
        pargs = [present_with_brackets(a) for a in arg]
    else:
        pargs = [present_with_brackets(arg)]
    if fn in reverse_ops:
        return present_sequence(fn, pargs)
    if fn=='neg':
        return f"-{strip_brackets(str(pargs[0]))}"
    
    return f"{fn}( {', '.join(strip_brackets(str(a)) for a in pargs)} )"

def strip_brackets(s):
    while s:
        brackets, remaining = parse_lhs_brackets(s)
        if brackets and not remaining:
            s = brackets 
        else:
            break
    return s

    
def present_with_brackets(c):
    if typeof(c)=='SafeDict':
        result =  [present_fn(fn, cargs) for fn, cargs in c.items()]
        return simplify(result)
    else:
        return str(c)

def present(c):
    result = present_with_brackets(c)
    if typeof(result)=='str':
        result = strip_brackets(result)
    return result
